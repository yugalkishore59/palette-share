import { useDispatch, useSelector } from "react-redux";
import type { RootState } from "../redux/store";
import { useEffect, useState } from "react";
import { incrementPage, resetPosts } from "../redux/slices/postSlice";
import { fetchPosts } from "../redux/slices/postSlice";
import { Button, Container, ScrollArea, Stack } from "@mantine/core";

import {
  getAllPosts,
  createPost,
  getPostById,
  updatePost,
  deletePost,
} from "../utils/api";
import { PostType } from "../utils/interfaces";
import { PostCard } from "../components/Post/PostCard";

export const Gallery = () => {
  // const dispatch = useDispatch();
  // const { posts, page, loading } = useSelector(
  //   (state: RootState) => state.posts
  // );

  // useEffect(() => {
  //   dispatch(fetchPosts(page));
  // }, [dispatch, page]);

  // const loadMorePosts = () => {
  //   if (!loading) {
  //     dispatch(incrementPage());
  //     dispatch(fetchPosts(page + 1));
  //   }
  // };

  // const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
  //   const bottom =
  //     e.currentTarget.scrollHeight - e.currentTarget.scrollTop ===
  //     e.currentTarget.clientHeight;
  //   if (bottom) {
  //     loadMorePosts();
  //   }
  // };

  const [posts, setPosts] = useState<PostType[]>([]);
  const [postData, setPostData] = useState<PostType>({
    _id: "", // Assuming this will be generated by the server
    description: "This is a test post.",
    userId: "user123", // Replace with actual user ID
    name: "John Doe",
    username: "johndoe123",
    imageUrl: "https://picsum.photos/200/300",
    tags: ["art", "painting"],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    likes: 0,
    comments: [],
    license: "CC BY-SA 4.0",
  });

  const printAllPosts = async () => {
    let posts = await getAllPosts();
    console.log(posts);
    setPosts(posts);
  };

  const handleCreatePost = async () => {
    try {
      const createdPost = await createPost(postData);
      console.log("Created post:", createdPost);
    } catch (error) {
      console.error("Error creating post:", error);
    }
  };

  useEffect(() => {
    printAllPosts();
  }, []);

  return (
    <Container size="lg" p="xs">
      <Stack>
        {posts.length > 0 &&
          posts.map((post, index) => <PostCard key={index} post={post} />)}
      </Stack>
    </Container>
  );
};
